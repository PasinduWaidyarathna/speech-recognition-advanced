name: CICD pipeline with ECR and EC2
run-name: CICD pipeline with ECR and EC2

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - '.github/workflows/**'
  workflow_dispatch:

env:
  SSH_USER: ${{ secrets.SSH_USER }}
  SSH_HOST: ${{ secrets.SSH_HOST }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY_URI: ${{ secrets.ECR_REPOSITORY_URI }}

jobs:
  ecr:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.ECR_REPOSITORY_URI }}:latest

  ec2:
    name: Deploy to EC2
    needs: ecr
    runs-on: ubuntu-latest
    steps:
      - name: Ensure Docker on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi

      - name: Ensure AWS CLI on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            if ! command -v aws &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y snapd
              sudo snap install aws-cli --classic
            fi
            aws --version

      - name: Configure AWS Credentials on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            aws configure set aws_access_key_id ${{ env.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ env.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}

      - name: Login to ECR on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            aws ecr get-login-password --region ${{ env.AWS_REGION }} \
              | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Pull & Run container on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.SSH_HOST }}
          username: ${{ env.SSH_USER }}
          key: ${{ env.SSH_PRIVATE_KEY }}
          script: |
            CONTAINER_NAME="flask-api"
            IMAGE_URI="${{ env.ECR_REPOSITORY_URI }}:latest"
            # Stop & remove existing
            sudo docker stop $CONTAINER_NAME || true
            sudo docker rm $CONTAINER_NAME  || true
            # Pull & run
            sudo docker pull $IMAGE_URI
            sudo docker run -d \
              --name $CONTAINER_NAME \
              -p 5000:5000 \
              $IMAGE_URI
